Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-12-07T11:33:52+09:00

===========================오전1===========================

Python
약수 개수구하기.
휴가비 챙기기 DFS



===========================오전2===========================

Java 
Spring

__OSI 7 layers__
https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95
https://ssanggu.github.io/ch0/osi-7-layer/
Layer 7 응용계층 (Application Layer)
Layer 6 표현계층 (Presentation Layer)
Layer 5 세션계층 (Session Layer)
Layer 4 전송계층 (Transport Layer) ---------------- TCP 영역
Layer 3 네트워크 계층 (Network Layer)  ------------
Layer 2 데이터 링크 계층 (Data Link Layer) --------  IP 영역
Layer 1 물리 계층 (Physical Layer) ----------------


REST API

- URL을 통해 CRUD 작업을 수행할 수 있다.


*** 스프링 프레임워크
	- 핵심 기술 : 스프링 DI(Depedency Injection -의존성 주입) 컨테이너, AOP, 이벤트, 기타
	- 웹 기술 : 스프링 MVC, 스프링 WebFlux
	- 데이터 접근 기술: 트랜잭선, JDBC, ORM 지원, XML지원
	- 기술 통합 : 캐시, 이메일, 원격접근, 스케줄링
	- 테스트 : 스프링 기반 테스트 지원
	- 언어 : 코틀린, 그루비
	- 최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용

*** 스프링 부트
	- 스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본 사용
	- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
	- Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
	- 손쉬운 빌드 구성을 위한 starter 종속성 제공
	- 스프링과 3rd parth(외부) 라이브러리 자동 구성
	- 메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공
	- 관례에 의한 간결한 설정

*** 스프링의 핵심 개념, 컨셉
	- 웹 애플리케이션 만들고, DB 접근 편리하게 해주는 기술
	- 전자정부 프레임워크
	- 웹서버 띄움
	-

*** 스프링의 핵심
	- 스피링은 자바 언어 기반의 프레임워크
	- 자바 언어의 가장 큰 특징 - __객체 지향언어__
	- 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
	- 스프링은 __좋은 객체 지향 애플리케이션__을 개발할 수 있게 도와주는 프레임 워크

===========================오후1=========================== 

*** 객체 지향 프로그래밍
	- 객체 지향 프로그래밍
	
*** 역할과 구현을 분리
	- 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
	- 장점
		- 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
		- 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
		- 클라이언트는 구현 대상의 내부구조가 변경되어도 영향을 받지 않는다.
		- 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.

*** 다형성의 본질
	- 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
	
*** SOLID (객체지향의 5대 설계 원칙)
	- 클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
	
	1. SRP: 단일 책임 원칙(Single responsibility principle)
		a. 한 클래스는 하나의 책임만 가져야한다.
		b. 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것

	2. **__OCP__**: 개방 폐쇄 원칙(Open / closed principle)
		a. 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야한다.
		b. 다형성을 활용

	3. LSP: 리스코프 치환 원칙(Liskov  substitution principle)
	4. ISP: 인터페이스 분리 원칙(Interface segregation principle)
		a. 특정 클라이언트를 위한 인터페이스는 여러개가 범용 인터페이스 하나보다 낫다.
		b. 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
		c. 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
		d. 인터페이스가 명확해지고, 대체 가능성이 높아진다. 
	5. **__DIP__**: 의존관계 역전 원칙 (Dependency inversion principle)
		a. 그런데 OCP에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다.
		b. DIP 위반은 구현객체를 위반한 것...
정리 -
	객체 지향의 핵심은 다형성
	다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.
	다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.
	__다형성 만으로는 OCP, DIP를 지킬 수 없다.__
	뭔가 더필요하다... Spring!!

스프링
1. 스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원
	a. DI(Dependency Injection): 의존 관계, 의존성 주입
	b. DI 컨테이너 제공
2. __클라이언트 코드의 변경없이 기능 확장__


spring 설치 순서

start.spring.io »  Gradle Project » java » 2.36 » 
Project Metadata » group <hello> » artifact <core> » Jar » 11
» Generate 

비지니스 요구사항과 설계

1. 회원
	a. 회원을 가입하고 조회할 수 있다.
	b. 회원은 일반과 VIP 두 가지 등급이 있다.
	c. 회원 데이터는 자체 DB를 구축할 수 있고, 외부 시스템과 연동할 수 있다.(미확정)
2. 주문과 할인 정책
	a. 회원은 상품을 주문할 수 있다.
	b. 회원 등급에 따라 할인 정책을 적용할 수 있다.
	c. 할인 정책은 모든 VIP는 1000원을 할인해주는 고정 금액 할인을 적용해달라. (나중에 변경 될 수 있다.)
	d. 할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고, 오픈 직전까지 고민을 미루고싶다. 최악의 경우 할인을 적용하지 않을 수 도 있다.(미확정)

기획자와의 회의는 회의록으로 문서화해서 해야한다. 
가능하다면 메일로 회의록에 대한 OK답신을 확보

