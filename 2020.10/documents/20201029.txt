Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-10-29T09:37:45+09:00

===========================오전1===========================

__도커 참고 좋은 사이트__
https://docs.microsoft.com/ko-kr/visualstudio/docker/tutorials/docker-tutorial

__선생님 구글 문서__
https://docs.google.com/document/d/1HYcpZ001qyaVXglc1ku7UWrzMjTBFpp8Iy-2oTZoXuQ/edit


===========================오전2===========================
[[/home/song/workspace/mydocker]]
- git clone https://github.com/poby13/flaskproject
- docker pull poby13/flask-started
- 선생님이 만든 플라스크 프로젝트와, 도커를 클론하고 풀한다.

[[/home/song/workspace/mydocker/flaskproject]]
- docker-compose up -d
- 구성해놓은 플라스크앱과, 마리아db 앱이 컨테이너로 실행이 된다.

===========================오전3===========================

pip freeze
- 이 내용을 txt로 만듬
pip freeze > requirements.txt
- txt로 pip 설치가능
pip install -r requirements.txt
- 목록대로 설치

[[~/workspace/mydocker/myflask]]
- Dockerfile 을 작성하여 원하는 프로그램과 실행할 명령어들을 
작성한다.
- 필요한 파이썬앱을 작성한다.
- 필요한 pip 리스트를 작성한다.
- 밑의 명령어로 이미지를 만든다.

docker build -t myflask .
- myflask란 이름으로 현재폴더에 있는 내용들을 가진 이미지를 만든다. 
- 원하는 내용의 img를 만들려면 Dockerfile 을 작성해야한다.
- myflask 란 img가 생성이 되었으면

docker run -dp 5000:5000 --name myf myflask
- myflask img로 myf란 컨테이너를 생성하여 daemon으로 백그라운드 실행하고 포트는 5000번으로 연결한다.
- myf컨테이너는 wsgi.py를 gunicorn 환경에서 실행 중이다.


=====================================================
docker 이미지 rename은 명령어가 없고
docker tag <old name> <new name>
- 이미지 복사후 예전 이미지를 삭제한다.

===========================오후1=========================== 


docker 복습

python 
- class 리팩토링 연습


javascript
- events, String
