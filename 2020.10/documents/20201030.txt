Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-10-30T08:44:20+09:00

===========================오전1===========================


https://docs.google.com/forms/d/1koVpClWp2G0Ty8pFXfPSgkfG8nXpWBwfATDIY7CBZ4M/viewform?edit_requested=true&fbzx=-1853279036735518901&edit2=2_ABaOnudse2rqB3BWKcJ8u2vul7ttO6xHdpXcjaNqPqyI6hnDVq_3AxbaYA



===========================오전2===========================

docker
__앱 업데이트__

소스 코드 업데이트
- 기존 컨테이너를 정지시키고 삭제한다. 해당 작업폴더에 소스를 업데이트한다
docker build -t myflask .
- 소스 코드가 업데이트 될 때는 업데이트 후에 해당 이미지로 다시 build해서 img를 업데이트 시킨다.

docker run -dp 5000:5000 --name myf myflask
- 새로운 컨테이너를 띄우면 소스가 업데이트된 img가 실행된다.

__앱 공유__

myflask를 july2day/myflask:test로 push 하려면 로컬에 있는 이미지에 태그 이름으로 변경해야한다.

docker tag [[myflask:latest]] july2day/myflask:test

docker push july2day/myflask:test
- dockerhub에 푸쉬한다.

===========================오전3===========================

__데이터베이스 유지__

docker volume create myflask_db
- 디비를 연결한 볼륨을 만든다.

docker run -dp 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 \
-e MYSQL_DATABSE=myflask \
-v myflask_db:/var/lib/mysql\
--name myflask_db [[mariadb:latest]]

--- myflask_db란 호스트 볼륨에 도커의 [[/var/lib/mysql로]] 연결한다.
--- myflask란 db에 member란 테이블을 만들고 데이터 인서트

docker stop myflask_db
docker rm myflask_db
docker run -dp 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 \
-e MYSQL_DATABSE=myflask \
-v myflask_db:/var/lib/mysql\
--name myflask_db [[mariadb:latest]]

컨테이너 삭제하고 다시 같은 -v 를 주면 docker volume인 myflask_db에
데이터가 저장되어있기 때문에 삭제 된 컨테이너에서 입력한 데이터들이 
남아있다.

===========================오전4===========================

===========================오후1=========================== 
javascript String, String methods, Number, Number methods,

Array, date

