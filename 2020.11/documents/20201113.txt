Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-11-13T10:13:02+09:00

===========================오전1===========================

Python
리스트 컴프리 핸서, 문자열 포매팅

패키지 모듈 만들어서 불러오기


===========================오전2===========================

Java
클래스
	변수의 초기화
	- 변수를 선언하고 처음으로 값을 저장하는 것
	- 멤버변수(IV, CV)와 배열은 각 타입의 기본값으로 자동 초기화된다.생략 가능
	- __지역변수는 사용전에 꼭!! 초기화__를 해주어야한다.
	
	멤버 변수의 초기화 시기와 순서
	- 클래스 변수 초기화 시점 : 클래스가 처음 로딩될 때 단 한번!
	- 인스턴스변수 초기화 시점 : 인스턴스가 생성될 때 마다
	ex) 
	class InitTest{
		static int cv = 1;
		int iv = 1;
		static { cv =2; } __//클래스 초기화 블럭__
		{ iv = 2;}	  __// 인스턴스 초기화블럭__
		InitTest() { iv = 3;} __//제일마지막실행__
	}
	[[InitTest]] it = new InitTest();
	// cv = 2, iv = 3;

	캡슐화 - 처음 클래스시작부터 위의 클래스까지
	
	상속
	- 멤버 = 변수 + method
	- 자손은 조상의 모든 멤버를 상속 받는다.
	- 자손의 멤버개수는 조상보다 적을 수 없다.(같거나 많다.)
	
	__클래스 포함관계(composite)__
	- 한 클래스의 멤버변수로 다른 클래스를 선언
	- 작은 단위의 클래스를 먼저 만들고, 이들을 조합해 커다란 클래스를 만든다.
	
	__상속관계 20% vs 포함관계 80%__
	
	-클래스를 상속받을 때 상속하는 클래스에 꼭 default 생성자를 만들어준다.
	-__생성자의 첫 칸은 항상 다른 생성자를 호출(super())__해야한다.(자동으로 된다.)
	
	Java는 단일상속만을 허용한다.(C++은 다중상속 허용)
	
	Object 클래스 - 모든 클래스의 최고조상

===========================오후1=========================== 

	오버라이딩(overriding
	- 조상클래스로부터 상속받은 메서드의 내용을 상속받는 클래스에 맞게 변경 하는 것 (override - __~위에 덮어쓰다(overwrite)__)
	- 선언부가 같아야 한다.(이름, 매개변수, 리턴타입)
	- 접근제어자를 좁은 범위로 변경할 수가 없다.
   - 조상의 클래스 메서드보다 많은 수의 예외를 선언할 수 없다.

		- toString() 은 println이 가지고 있는 메서드이다
		- toString() 을 오버라이딩 할 수 있다. (Exam018_class_overriding.java)
		
		
	오버로딩 - 기존에 없는 새로운 메서드를 정의 하는 것,기존의 매개변수가 타입이 다를경우(New)
	오버라이딩 - 상속받은 메서드의 내용을 변경하는 것(change, modify)
		- 상속을 받고 안받고의 차이
		
		ex)
		class Parent {
			void parentMethod() {}
		}
		class Child extends Parent {
			void parentMethod() {}		//오버라이딩
			void parentMethod(int i) {}	// 오버로딩
			
			void childMethod() {}
			void childMethod(int i) {}	// 오버로딩
			void childMethod() {}		// 에러!! 중복정의
			
			
	this - 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어있음. 모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재
	
	super - this와 같음 (참조변수). 조상의 멤버와 자신의 멤버를 구별하는 데 사용.
	
	super() -조상의 생성자
	__- Object클래스를 제외한 모든 클래스의 생성자 첫 줄에는 생성자를 호출해야한다.__
	__- 그렇지 않으면 컴파일러가 자동적으로 'super()'를 생성자의 첫줄에 삽입한다.__
	


