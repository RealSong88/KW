Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-11-17T11:05:06+09:00

===========================오전1===========================

Python

# 사과나무 (다이아몬드) ---------- 인덱스 문제
# 현수의 농장은 N X N 격자판으로 이루어져 있으며, 각 격자안에는 한 그루의 사과나무가 심어져 있다.
# N의 크기는 항상 홀수이다. 가을이 되어 사과를 수확해야 하는데 현수는 격자판안의 사과를 수확할 때
# 다이아몬드 모양의 격자판만 수확하고 나머지 격자안의 사과는 새들을 위해서 남겨놓는다.
# 만약 N이 5이면 아래 그림과 같이 진한 부분의 사과를 수확한다.
# 3X3 으로 쪼개서 생각한다. 첫번째 줄은 가운데 인덱스를 구한다.
# 사과나무in1.txt. -> 1049 , 사과나무in2.txt -> 1991
# 마방진 인덱스문제 찾아서 풀어보자..


===========================오전2===========================

Java

	인터페이스(interface)란?
	- 추상클래스(미완성 설계도)보다 추상화 정도가 높다.
	- 실제 구현된 것이 전혀 없는 기본 설계도.(알맹이 없는 껍데기)
	- __추상메서드와 상수만을 멤버__로 가질 수 있다.
	- 인스턴스를 생성할 수 없다.
	- __추상메서드의 집합__
	
	- __모든 멤버변수는 **public static final** 이어야하며, 이를 생략__할 수있음
	- __모든 메서드는 **public abstract** 이어야하며, 이를 생략__ 할 수 있다.
	ex)
	interface [[PlayingCard]] {
		public static final int SPADE = 4;
		final int DIAMOND = 3; // public static final int DIAMOND = 3;
		public abstract String getCardNumber();
		String getCardKind(); // public abstract String getCardKind();
	}

	
	인터페이스 상속
	- 클래스와 달리 다중상속 허용
		 - __인터페이스는 Object클래스와 같은 최고 조상이 없다__.
	
	인터페이스 구현
		- 인터페이스를 구현하는 것은 클래스를 상속받는 것과 같다. 다만,
		'extends' 대신 'implements'를 사용한다.
	
	인터페이스의 장점
		- 개발시간을 단축시킬 수 있다.
		- 표준화가 가능하다.
		- __서로 관계없는 클래스들에게 관계__를 맺어 줄 수 있다.
		- 독립적인 프로그래밍이 가능하다.
	
	default method - 디폴트 메서드
		- 인터페이스에 새로운 메서드(추상 메서드)를 추가하면?
		이 인터페이스를 구현한 기존의 모든 클래스가 이 메서드를 구현해야 함
		- 이 문제를 해결하기 위해 '디폴트 메서드'를 고안
		- 디폴트 메서드는 추상 메서드의 기본 구현을 제공한다. 그래서 __몸통{}을 가지고 있으며__, 앞에 'default'를 붙이고 항상 public이다.(생략가능)
		
	오버라이딩 조건
	- 선언부가 같아야한다.
	- 접근제어자를 좁은 범위로 변경할 수 없다.
	
	

===========================오후1=========================== 

12월1일 포트폴리오 착수보고회
===========================오후2===========================



===========================오후3===========================
