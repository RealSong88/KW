Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-11-16T09:27:51+09:00

===========================오전1===========================

python

# 1. 다음의 select_common(first, second) 함수를 만드시오
# 처리조건
# - 두개의 스트링 문자열을 받아 공통의 단어를 뽑아내시오.
# - 각 스트링의 단어는 컴마로 구분한다.
# 처리 예
# print(select_common('one,two,three,six', 'two,five,six')) === six , two
# print(select_common('Hello, World', 'The, World, is, very, beautiful'))  === World

__#****** 중복되는 경우 set이나 not in 을 활용하자****__

# 2. 로또번호 구하기 (1 ~ 45)
# 중복 빼기

# 다음의 is_goodpw(data) 함수를 만드시오
# 처리조건
# - 10자 이상, 최소 한 대문자, 소문자, 숫자 한 개는 반드시 포함하는 조합으로 패스워드를 만들어 이조건을 만족하면 True 그렇지 않으면 False
# 를 출력하는 함수를 만드시오
# - 위의 조건을 만족하는 함수를 만들었다면 이제는 특수문자를 반드시 포함하는 is_realgoodpw(data)함수로 확장해보시오
# 처리 예)
# - print(is_goodpw('sdfjHksdfjl34$$')) // True
# - print(is_goodpw('sdfjl3jQ%4dd')) // True
# - is_realgoodpw('Korea2020fight!!!') // True

__#****** isdigit(), islower(), isupper(), any() 함수를 활용__

===========================오전2===========================

Java

클래스의 제어자(modifier)란? — (형용사 또는 부사이다. 튼튼한 나)
	__캡슐화__ : 
	접근 제어자를 사용하는 이유
		- 외부로부터 데이터를 보호
		- 외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위해
		
	- 클래스에게 형용사 또는 설명하는 부사이다.
	__- 접근제어자가 사용될 수 있는 곳 - 클래스, 멤버변수, 메서드, 생성자__
	접근 제어자 - public, protected, default , private (P,D,P,P)     
		- scope(범위) 순서 - __private < default < protected < public__
		private : __같은 클래스__ 내에서만 접근이 가능
		default : __같은 패키지__ 내에서만 접근이 가능하다.
		protected - 같은 패키지내에서, 그리고 다른 패키지의 자손클래스에서 접근
		public - __파일이름과 public 클래스의 이름__은 같아야한다. p__ublic 클래스는 프로그램당 오직 하나__만 있어야한다. 접근 제한이 전혀 없다.
		
	static : 컴파일시 메모리에 생성, 인스턴스, 클래스에서 접근 가능
	final : 상수, 변경 될 수 없는 (클래스(다른 클래스의 조상이 될 수 없음), 메서드, 변수)
	__모든 클래스는 조상이 object이다__
	

	__다형성(polymorphism)__ 
	- 여러가지 형태를 가질 수 있는 능력
	- 하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것.
	__조상타입의 참조변수로 자손타입의 객체를 다룰 수 있는 것__
	- __반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조__ 할 수 없다.
	
	
	**__형변환을 하는 이유 - 메소드의 양을 줄일 수 있다.__**
	예) Exam021_class_polymorphism01.java
		- 인스턴스를 배열에 담을 수 있다.(참조값이기 때문)
	ex)
	Product p = new Tv()
	Product p = (Product) new Tv() 
	// __조상 <--- 자손 형변환 가능__하다(형변환시 자손의 멤버는 사용할 수 없다.)
	- (Product) 는 생략 가능
===========================오후1=========================== 

	
	__abstract : 추상의 , 미완성의__
		- __상속을 통해서만 인스턴스화 시킬 수 있다. __
		클래스 - 클래스 내에 추상메서드가 선언되어 있음을 의미한다.
		- __메서드 - 선언부만 작성하고 구현부(몸통, body)가 없는 메서드__, 메서드에 __{}를__ 쓰지않는다.
		- 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우에 사용
		- 여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 바로 작성하거나 기존클래스의 공통 부분을 뽑아서 추상클래스를 만든다.
		- 추상화 메서드를 사용할 경우 클래스에도 abstract를 선언해야한다.
	ex) abstract class AbstractTest { // 추상클래스
			abstract void move(); // 추상메서드, {}없지만 실행 가능
		}
		
	제어자의 조합
	- 메서드에 static과 //abstract를// 함께 사용할 수 없다.
	- 클래스에 abstract와 final을 동시에 사용할 수 없다.
	- abstract 메서드의 접근제어자가 private일 수 없다.
	- 메서드에 private과 final을 같이 사용할 필요는 없다.
	
	추상클래스와 인터페이스의 차이
	- 추상클래스는 멤버(iv, cv등등)를 가질 수 있지만 인터페이스는 추상메서드와 상수만 가질 수 있다.
	-
	
	인터페이스(interface)란?
	- 추상클래스(미완성 설계도)보다 추상화 정도가 높다.
	- 실제 구현된 것이 전혀 없는 기본 설계도.(알맹이 없는 껍데기)
	- __추상메서드와 상수만을 멤버__로 가질 수 있다.
	- 인스턴스를 생성할 수 없다.
	- __추상메서드의 집합__
	
	인터페이스 상속
	- 클래스와 달리 다중상속 허용
	공부한 내용 xmind로 정리
	
===========================오후2===========================
System.out.println("");

===========================오후3===========================
