Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-10-08T13:42:48+09:00

====== Docker ======
만든 날: 목요일 08 10월 2020

docker - microsoft 문서 정리
https://docs.microsoft.com/ko-kr/visualstudio/docker/tutorials/multi-container-apps

docker formatting
https://docs.docker.com/engine/reference/commandline/ps/#formatting

__앱 업데이트__

소스 코드 업데이트
- 기존 컨테이너를 정지시키고 삭제한다. 해당 작업폴더에 소스를 업데이트한다
docker build -t myflask .
- 소스 코드가 업데이트 될 때는 업데이트 후에 해당 이미지로 다시 build해서 img를 업데이트 시킨다.

docker run -dp 5000:5000 --name myf myflask
- 새로운 컨테이너를 띄우면 소스가 업데이트된 img가 실행된다.

__앱 공유__

myflask를 july2day/myflask:test로 push 하려면 로컬에 있는 이미지에 태그 이름으로 변경해야한다.

docker tag [[myflask:latest]] july2day/myflask:test

docker push july2day/myflask:test
- dockerhub에 푸쉬한다.


__데이터베이스 유지__

docker volume create myflask_db
- 디비를 연결한 볼륨을 만든다.

docker run -dp 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 \
-e MYSQL_DATABASE=myflask \
-v myflask_db:/var/lib/mysql \
--name myflask_db [[mariadb:latest]]

--- myflask_db란 호스트 볼륨에 도커의 [[/var/lib/mysql로]] 연결한다.
--- myflask란 db에 member란 테이블을 만들고 데이터 인서트

docker stop myflask_db
docker rm myflask_db
docker run -dp 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 \
-e MYSQL_DATABASE=myflask \
-v myflask_db:/var/lib/mysql \
--name myflask_db [[mariadb:latest]]

컨테이너 삭제하고 다시 같은 -v 를 주면 docker volume인 myflask_db에
데이터가 저장되어있기 때문에 삭제 된 컨테이너에서 입력한 데이터들이 
남아있다.

__다중 컨테이너 앱__

docker network create myflask-net
- myflask-net 이라는 네트워크를 생성한다.

docker run -d \
	--network <네트워크> --network-alias mariadb \
	-v <db 볼륨>:/var/lib/mysql \
	-e MYSQL_ROOT_PASSWORD=<비번> \
	-e MYSQL_DATABASE=<db 이름> \
	mariadb:latest

===> 네트워크명, db볼륨명, 비번, db 이름 입력 ===>

docker run -d \
	--network myflask-net --network-alias mariadb \
	-v myflask_db:/var/lib/mysql \
	-e MYSQL_ROOT_PASSWORD=000000 \
	-e MYSQL_DATABASE=myflask \
	--name myflask_db [[mariadb:latest]]
- myflask-net 이라는 도커 네트워크에 myflask_db라는 컨테이너를 연결한다.

__pip 설치 오류시 필요한 패키지__
sudo apt install python3-pip python3-dev build-essential libssl-dev libffi-dev python3-setuptools

app.ini
- 해당 db의 접속할 수있는 내용이 담겨있다.

__바인드 탑재 사용__


__다중 컨테이너 앱__


- docker-compose up -d
- 구성해놓은 플라스크앱과, 마리아db 앱이 컨테이너로 실행이 된다.


=================================================================


ubuntu 20에 도커 설치
https://blog.dalso.org/linux/ubuntu-20-04-lts/13118

__window 10(wsl2)에 도커 설치__
https://www.44bits.io/ko/post/wsl2-install-and-basic-usage

portainer 구축 이유
-portainer는 docker의 이미지,컨테이너,네트워크등을 쉽게 관리할 수 있게 도와주는 GUI Web 서비스를 사용하기 위해

docker swarm 을 이용하면 docker API를 연동하여 여러 서버의 Docker Container를 관리 할 수 있다.

사용법 참고사이트
https://medium.com/@jjeaby/portainer-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95-docker-container-management-web-service-5a7401472ee6


docker swarm join --token docker swarm  === token
KN-1-2zreis3s7r9ofbmeter5z7ej1mrb07lgxzud5cm3sgg5sjrgke-9pqxphrmww3t2mretn5v35xbt 10.0.0.5:2377

Docker Swarm 이란?
수많은 컨테이너 오케스트레이션 도구 중의 하나로, 여러 대의 Docker 호스트들을 마치 하나인 것처럼 만들어주는 Orchestration 도구입니다. Docker v1.12 이후부터 Docker Swarm Mode 로 별개의 Docker Swarm 엔진에서 Docker 엔진으로 통합되면서 좀 더 간편한 설치가 가능


도커 버전 확인
docker -v

컴퓨터 내 도커 이미지들 보기
docker images 

 이미지를 다운받아(없을 시에만) 바로 컨테이너 실행하여 진입하기
docker run {이미지명}:{태그}
# 예: docker -it run python:3

(동작중인) 컨테이너들 보기
docker ps 
docker ps -a  (모든) 컨테이너 보기
docker container ps -a === 위와 같다


모든 컨테이너와 이미지 등 도커 요소 중지 및 삭제

# 모든 컨테이너 중지
docker stop $(docker ps -aq)
# 사용되지 않는 모든 도커 요소(컨테이너, 이미지, 네트워크, 볼륨 등) 삭제
docker system prune -a

 도커파일로 이미지 생성
# Dockerfile 파일이 있는 디렉토리 기준.  마지막의 . 이 상대주소
docker build -t {이미지명} .

도커 컴포즈 실행
# docker-compose 파일이 있는 디렉토리 기준
docker-compose up

사용중인 컨테이너 이미지 만들기

docker stop ajaxtest
docker commit ajaxtest myubuntu 
- ajaxtest 컨테이너로 myubuntu라는 이미지 생성


[[2020.10:documents:20201019]]
